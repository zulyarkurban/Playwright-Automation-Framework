{"version":3,"file":"step_runner.js","sourceRoot":"","sources":["../../src/runtime/step_runner.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,kBAsEC;AAjGD,6DAA8C;AAC9C,2EAAgD;AAGhD,oDAIyB;AACzB,mCAA4C;AAC5C,2CAAoC;AACpC,iDAA4C;AAgBrC,KAAK,UAAU,GAAG,CAAC,EACxB,cAAc,EACd,iBAAiB,EACjB,aAAa,EACb,IAAI,EACJ,cAAc,EACd,KAAK,GACO;IACZ,MAAM,SAAS,GAAG,IAAA,kBAAM,GAAE,CAAC,KAAK,EAAE,CAAA;IAClC,IAAI,KAAU,EAAE,MAAW,EAAE,cAA0C,CAAA;IAEvE,IAAI,CAAC;QACH,MAAM,IAAA,0BAAkB,EAAC,EAAE,KAAK,EAAE,EAAE,KAAK,IAAI,EAAE;YAC7C,cAAc,GAAG,MAAM,cAAc,CAAC,uBAAuB,CAAC;gBAC5D,aAAa;gBACb,IAAI;gBACJ,KAAK;aACN,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,KAAK,GAAG,GAAG,CAAA;IACb,CAAC;IAED,IAAI,IAAA,gCAAgB,EAAC,KAAK,CAAC,EAAE,CAAC;QAC5B,MAAM,qBAAqB,GAAG,IAAA,8BAAc,EAC1C,cAAc,CAAC,OAAO,CAAC,OAAO,EAC9B,cAAc,CACf,CAAA;QAED,IAAI,cAAc,CAAC,gBAAgB,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YACzE,MAAM,IAAI,GAAG,MAAM,IAAA,0BAAkB,EAAC,EAAE,KAAK,EAAE,EAAE,KAAK,IAAI,EAAE,CAC1D,0BAAc,CAAC,GAAG,CAAC;gBACjB,SAAS,EAAE,cAAc,CAAC,UAAU;gBACpC,EAAE,EAAE,cAAc,CAAC,IAAI;gBACvB,OAAO,EAAE,KAAK;gBACd,qBAAqB;aACtB,CAAC,CACH,CAAA;YACD,KAAK,GAAG,IAAI,CAAC,KAAK,CAAA;YAClB,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;QACtB,CAAC;aAAM,CAAC;YACN,KAAK,GAAG,cAAc,CAAC,2BAA2B,EAAE,CAAA;QACtD,CAAC;IACH,CAAC;IAED,MAAM,QAAQ,GAAG,SAAS,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAA;IAC5C,IAAI,MAAqC,CAAA;IACzC,IAAI,OAAO,GAAG,EAAE,CAAA;IAChB,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;QACzB,MAAM,GAAG,QAAQ,CAAC,oBAAoB,CAAC,OAAO,CAAA;IAChD,CAAC;SAAM,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;QAChC,MAAM,GAAG,QAAQ,CAAC,oBAAoB,CAAC,OAAO,CAAA;IAChD,CAAC;SAAM,IAAI,IAAA,6BAAa,EAAC,KAAK,CAAC,EAAE,CAAC;QAChC,MAAM,GAAG,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAA;IAC/C,CAAC;SAAM,CAAC;QACN,MAAM,GAAG,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAA;IAC/C,CAAC;IAED,IAAI,IAAA,6BAAa,EAAC,KAAK,CAAC,EAAE,CAAC;QACzB,OAAO,GAAG,IAAA,0BAAW,EAAC,KAAK,EAAE,iBAAiB,CAAC,CAAA;IACjD,CAAC;IAED,OAAO;QACL,MAAM,EAAE;YACN,QAAQ;YACR,MAAM;YACN,GAAG,OAAO;SACX;QACD,KAAK;KACN,CAAA;AACH,CAAC;AAED,kBAAe,EAAE,GAAG,EAAE,CAAA","sourcesContent":["import * as messages from '@cucumber/messages'\nimport UserCodeRunner from '../user_code_runner'\nimport { ITestCaseHookParameter } from '../support_code_library_builder/types'\nimport { IDefinition, IGetInvocationDataResponse } from '../models/definition'\nimport {\n  doesHaveValue,\n  doesNotHaveValue,\n  valueOrDefault,\n} from '../value_checker'\nimport { runInTestCaseScope } from './scope'\nimport { create } from './stopwatch'\nimport { formatError } from './format_error'\n\nexport interface IRunOptions {\n  defaultTimeout: number\n  filterStackTraces: boolean\n  hookParameter: ITestCaseHookParameter\n  step: messages.PickleStep\n  stepDefinition: IDefinition\n  world: any\n}\n\nexport interface RunStepResult {\n  result: messages.TestStepResult\n  error?: any\n}\n\nexport async function run({\n  defaultTimeout,\n  filterStackTraces,\n  hookParameter,\n  step,\n  stepDefinition,\n  world,\n}: IRunOptions): Promise<RunStepResult> {\n  const stopwatch = create().start()\n  let error: any, result: any, invocationData: IGetInvocationDataResponse\n\n  try {\n    await runInTestCaseScope({ world }, async () => {\n      invocationData = await stepDefinition.getInvocationParameters({\n        hookParameter,\n        step,\n        world,\n      })\n    })\n  } catch (err) {\n    error = err\n  }\n\n  if (doesNotHaveValue(error)) {\n    const timeoutInMilliseconds = valueOrDefault(\n      stepDefinition.options.timeout,\n      defaultTimeout\n    )\n\n    if (invocationData.validCodeLengths.includes(stepDefinition.code.length)) {\n      const data = await runInTestCaseScope({ world }, async () =>\n        UserCodeRunner.run({\n          argsArray: invocationData.parameters,\n          fn: stepDefinition.code,\n          thisArg: world,\n          timeoutInMilliseconds,\n        })\n      )\n      error = data.error\n      result = data.result\n    } else {\n      error = invocationData.getInvalidCodeLengthMessage()\n    }\n  }\n\n  const duration = stopwatch.stop().duration()\n  let status: messages.TestStepResultStatus\n  let details = {}\n  if (result === 'skipped') {\n    status = messages.TestStepResultStatus.SKIPPED\n  } else if (result === 'pending') {\n    status = messages.TestStepResultStatus.PENDING\n  } else if (doesHaveValue(error)) {\n    status = messages.TestStepResultStatus.FAILED\n  } else {\n    status = messages.TestStepResultStatus.PASSED\n  }\n\n  if (doesHaveValue(error)) {\n    details = formatError(error, filterStackTraces)\n  }\n\n  return {\n    result: {\n      duration,\n      status,\n      ...details,\n    },\n    error,\n  }\n}\n\nexport default { run }\n"]}