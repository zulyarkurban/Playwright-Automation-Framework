{"version":3,"file":"publish_plugin.js","sourceRoot":"","sources":["../../src/publish/publish_plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { Writable } from 'node:stream'\nimport { stripVTControlCharacters } from 'node:util'\nimport { mkdtemp, stat } from 'node:fs/promises'\nimport path from 'node:path'\nimport { tmpdir } from 'node:os'\nimport { createReadStream, createWriteStream } from 'node:fs'\nimport { supportsColor } from 'supports-color'\nimport hasAnsi from 'has-ansi'\nimport { InternalPlugin } from '../plugin'\nimport { IPublishConfig } from './types'\n\nconst DEFAULT_CUCUMBER_PUBLISH_URL = 'https://messages.cucumber.io/api/reports'\n\nexport const publishPlugin: InternalPlugin<IPublishConfig | false> = {\n  type: 'plugin',\n  coordinator: async ({ on, logger, options, environment }) => {\n    if (!options) {\n      return undefined\n    }\n    const { url = DEFAULT_CUCUMBER_PUBLISH_URL, token } = options\n    const headers: { [key: string]: string } = {}\n    if (token !== undefined) {\n      headers.Authorization = `Bearer ${token}`\n    }\n    const touchResponse = await fetch(url, { headers })\n    const banner = await touchResponse.text()\n\n    if (!touchResponse.ok) {\n      return () => {\n        if (touchResponse.status < 500) {\n          environment.stderr.write(\n            sanitisePublishOutput(banner, environment.stderr) + '\\n'\n          )\n        } else {\n          logger.error(\n            `Failed to publish report to ${new URL(url).origin} with status ${\n              touchResponse.status\n            }`\n          )\n          logger.debug(touchResponse)\n        }\n      }\n    }\n\n    const uploadUrl = touchResponse.headers.get('Location')\n    const tempDir = await mkdtemp(path.join(tmpdir(), `cucumber-js-publish-`))\n    const tempFilePath = path.join(tempDir, 'envelopes.ndjson')\n    const tempFileStream = createWriteStream(tempFilePath, {\n      encoding: 'utf-8',\n    })\n    on('message', (value) => tempFileStream.write(JSON.stringify(value) + '\\n'))\n\n    return () => {\n      return new Promise<void>((resolve) => {\n        tempFileStream.end(async () => {\n          const stats = await stat(tempFilePath)\n          const uploadResponse = await fetch(uploadUrl, {\n            method: 'PUT',\n            headers: {\n              'Content-Length': stats.size.toString(),\n            },\n            body: createReadStream(tempFilePath, { encoding: 'utf-8' }),\n            duplex: 'half',\n          })\n          if (uploadResponse.ok) {\n            environment.stderr.write(\n              sanitisePublishOutput(banner, environment.stderr) + '\\n'\n            )\n          } else {\n            logger.error(\n              `Failed to upload report to ${\n                new URL(uploadUrl).origin\n              } with status ${uploadResponse.status}`\n            )\n            logger.debug(uploadResponse)\n          }\n          resolve()\n        })\n      })\n    }\n  },\n}\n\n/*\nThis is because the Cucumber Reports service returns a pre-formatted console message\nincluding ANSI escapes, so if our stderr stream doesn't support those we need to\nstrip them back out. Ideally we should get structured data from the service and\ncompose the console message on this end.\n */\nfunction sanitisePublishOutput(raw: string, stderr: Writable) {\n  if (!supportsColor(stderr) && hasAnsi(raw)) {\n    return stripVTControlCharacters(raw)\n  }\n  return raw\n}\n"]}