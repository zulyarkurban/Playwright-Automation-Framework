"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = __importDefault(require("node:path"));
const promises_1 = require("node:stream/promises");
const message_streams_1 = require("@cucumber/message-streams");
const test_1 = require("@playwright/test");
const glob_1 = require("glob");
const src_1 = require("../src");
const fixtures = (0, glob_1.sync)(`./node_modules/@cucumber/compatibility-kit/features/**/*.ndjson`);
test_1.test.beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
    const outputDir = node_path_1.default.join(__dirname, './__output__');
    for (const fixture of fixtures) {
        const name = node_path_1.default.basename(fixture, '.ndjson');
        const outputFile = node_path_1.default.join(outputDir, name + '.html');
        yield (0, promises_1.pipeline)(node_fs_1.default.createReadStream(fixture, { encoding: 'utf-8' }), new message_streams_1.NdjsonToMessageStream(), new src_1.CucumberHtmlStream(node_path_1.default.join(__dirname, '../dist/main.css'), node_path_1.default.join(__dirname, '../dist/main.js'), node_path_1.default.join(__dirname, '../dist/src/icon.url')), node_fs_1.default.createWriteStream(outputFile));
    }
}));
for (const fixture of fixtures) {
    const name = node_path_1.default.basename(fixture, '.ndjson');
    (0, test_1.test)(`can render ${name}`, (_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
        yield page.goto(`/${name}.html`);
        yield page.waitForSelector('#report', { timeout: 3000 });
        yield (0, test_1.expect)(page).toHaveScreenshot(`${name}.png`);
    }));
}
//# sourceMappingURL=acceptance.spec.js.map