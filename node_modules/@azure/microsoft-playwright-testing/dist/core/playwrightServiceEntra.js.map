{"version":3,"file":"playwrightServiceEntra.js","sourceRoot":"","sources":["../../src/core/playwrightServiceEntra.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,mDAAkE;AAClE,6CAA8C;AAC9C,qEAAkE;AAGlE,MAAM,sBAAsB;IAY1B,IAAI,kBAAkB,CAAC,UAA2B;QAChD,IAAI,CAAC,mBAAmB,GAAG,IAAI,uCAAkB,CAAC,UAAU,CAAC,CAAC;IAChE,CAAC;IAED;QAIO,gBAAW,GAAG,KAAK,IAAmB,EAAE;YAC7C,mBAAU,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;YACrD,MAAM,IAAI,CAAC,mBAAmB,CAAC,uBAAuB,EAAE,CAAC;YACzD,IAAI,CAAC,iCAAiC,EAAE,CAAC;QAC3C,CAAC,CAAC;QAEK,mBAAc,GAAG,GAAS,EAAE;YACjC,mBAAU,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;YACxD,IAAI,IAAI,CAAC,mCAAmC,EAAE,CAAC;gBAC7C,aAAa,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;gBACxD,mBAAU,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;YACpE,CAAC;QACH,CAAC,CAAC;QAEM,sCAAiC,GAAG,GAAS,EAAE;YACrD,IAAI,CAAC,mCAAmC,GAAG,WAAW,CACpD,IAAI,CAAC,0BAA0B,EAC/B,uCAA2B,CAAC,mCAAmC,GAAG,EAAE,GAAG,IAAI,CAC5E,CAAC;YACF,mBAAU,CAAC,IAAI,CAAC,mDAAmD,CAAC,CAAC;QACvE,CAAC,CAAC;QAEM,+BAA0B,GAAG,KAAK,IAAmB,EAAE;YAC7D,mBAAU,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;YAC1D,IAAI,CAAC;gBACH,IAAI,IAAI,CAAC,mBAAmB,CAAC,kCAAkC,EAAE,EAAE,CAAC;oBAClE,MAAM,IAAI,CAAC,mBAAmB,CAAC,uBAAuB,EAAE,CAAC;gBAC3D,CAAC;YACH,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,mBAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,6EAA6E;YACtG,CAAC;QACH,CAAC,CAAC;QAlCA,IAAI,CAAC,mBAAmB,GAAG,IAAI,uCAAkB,EAAE,CAAC;IACtD,CAAC;;AAbM,kCAAW,GAAG,GAA2B,EAAE;IAChD,IAAI,CAAC,sBAAsB,CAAC,QAAQ,EAAE,CAAC;QACrC,sBAAsB,CAAC,QAAQ,GAAG,IAAI,sBAAsB,EAAE,CAAC;IACjE,CAAC;IACD,OAAO,sBAAsB,CAAC,QAAQ,CAAC;AACzC,CAAC,AALiB,CAKhB;AA4CJ,MAAM,QAAQ,GAAG,sBAAsB,CAAC,WAAW,EAAE,CAAC;AACtD,kBAAe,QAAQ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { EntraIdAccessTokenConstants } from \"../common/constants\";\nimport { coreLogger } from \"../common/logger\";\nimport { EntraIdAccessToken } from \"../common/entraIdAccessToken\";\nimport type { TokenCredential } from \"@azure/identity\";\n\nclass PlaywrightServiceEntra {\n  private _entraIdAccessTokenRotationInterval?: NodeJS.Timeout;\n  private static instance: PlaywrightServiceEntra;\n  private _entraIdAccessToken: EntraIdAccessToken;\n\n  static getInstance = (): PlaywrightServiceEntra => {\n    if (!PlaywrightServiceEntra.instance) {\n      PlaywrightServiceEntra.instance = new PlaywrightServiceEntra();\n    }\n    return PlaywrightServiceEntra.instance;\n  };\n\n  set entraIdAccessToken(credential: TokenCredential) {\n    this._entraIdAccessToken = new EntraIdAccessToken(credential);\n  }\n\n  constructor() {\n    this._entraIdAccessToken = new EntraIdAccessToken();\n  }\n\n  public globalSetup = async (): Promise<void> => {\n    coreLogger.info(\"Entra id access token setup start\");\n    await this._entraIdAccessToken.fetchEntraIdAccessToken();\n    this.entraIdGlobalSetupRotationHandler();\n  };\n\n  public globalTeardown = (): void => {\n    coreLogger.info(\"Entra id access token teardown start\");\n    if (this._entraIdAccessTokenRotationInterval) {\n      clearInterval(this._entraIdAccessTokenRotationInterval);\n      coreLogger.info(\"Entra id access token roation interval cleared\");\n    }\n  };\n\n  private entraIdGlobalSetupRotationHandler = (): void => {\n    this._entraIdAccessTokenRotationInterval = setInterval(\n      this.entraIdAccessTokenRotation,\n      EntraIdAccessTokenConstants.ROTATION_INTERVAL_PERIOD_IN_MINUTES * 60 * 1000,\n    );\n    coreLogger.info(\"Entra id access token rotation handler setup done\");\n  };\n\n  private entraIdAccessTokenRotation = async (): Promise<void> => {\n    coreLogger.info(\"Entra id access token rotation handler\");\n    try {\n      if (this._entraIdAccessToken.doesEntraIdAccessTokenNeedRotation()) {\n        await this._entraIdAccessToken.fetchEntraIdAccessToken();\n      }\n    } catch (err) {\n      coreLogger.error(err); // log error and continue if it's an intermittent issue (optimistic approach)\n    }\n  };\n}\n\nconst instance = PlaywrightServiceEntra.getInstance();\nexport default instance;\n"]}