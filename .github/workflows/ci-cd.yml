name: CI/CD Pipeline - Playwright Cucumber Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: 'lts/*'

jobs:
  test:
    name: Run Tests
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      matrix:
        worker-id: [1, 2, 3, 4]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Create reports directory
      run: mkdir -p reports
    
    - name: Run Cucumber tests in parallel
      run: npm run test:cucumber:parallel:ci
      env:
        CI: true
        HEADLESS: true
        CUCUMBER_WORKERS: 2
        WORKER_ID: ${{ matrix.worker-id }}
        TOTAL_WORKERS: 4
    
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-worker-${{ matrix.worker-id }}-${{ github.run_number }}
        path: |
          reports/
          test-results/
        retention-days: 30
    
    - name: Upload Cucumber HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cucumber-html-report-worker-${{ matrix.worker-id }}-${{ github.run_number }}
        path: reports/cucumber-report.html
        retention-days: 30
    
    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let comment = '## üß™ Test Results\n\n';
          
          try {
            if (fs.existsSync('reports/cucumber-report.json')) {
              const report = JSON.parse(fs.readFileSync('reports/cucumber-report.json', 'utf8'));
              const scenarios = report.reduce((acc, feature) => acc + feature.elements.length, 0);
              const passed = report.reduce((acc, feature) => 
                acc + feature.elements.filter(el => el.steps.every(step => step.result.status === 'passed')).length, 0);
              const failed = scenarios - passed;
              
              comment += `üìä **Test Summary:**\n`;
              comment += `- Total Scenarios: ${scenarios}\n`;
              comment += `- ‚úÖ Passed: ${passed}\n`;
              comment += `- ‚ùå Failed: ${failed}\n\n`;
              
              if (failed > 0) {
                comment += `‚ùå Some tests failed. Check the artifacts for detailed reports.\n`;
              } else {
                comment += `‚úÖ All tests passed!\n`;
              }
            } else {
              comment += '‚ö†Ô∏è No test report found.\n';
            }
          } catch (error) {
            comment += `‚ö†Ô∏è Error reading test results: ${error.message}\n`;
          }
          
          comment += '\nüìã [Download detailed reports from the Actions artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  collect-reports:
    name: Collect Test Reports
    needs: test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: "*-worker-*-${{ github.run_number }}"
        path: collected-artifacts
        merge-multiple: true
    
    - name: Upload consolidated test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: consolidated-test-reports-${{ github.run_number }}
        path: collected-artifacts/
        retention-days: 30

  deploy:
    name: Deploy Application
    needs: [test, collect-reports]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Deploy application
      run: |
        echo "üöÄ Deploying application..."
        npm run deploy
        echo "‚úÖ Deployment completed!"
      env:
        CI: true

  notify:
    name: Notify Results
    needs: [test, collect-reports, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Pipeline completed successfully - Tests passed and deployment successful!"
        elif [ "${{ needs.test.result }}" == "failure" ]; then
          echo "‚ùå Pipeline failed - Tests failed"
          exit 1
        elif [ "${{ needs.deploy.result }}" == "failure" ]; then
          echo "‚ùå Pipeline failed - Deployment failed"
          exit 1
        else
          echo "‚ö†Ô∏è Pipeline completed with warnings"
        fi
