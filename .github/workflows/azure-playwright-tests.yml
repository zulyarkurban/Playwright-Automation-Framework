name: Azure Playwright Testing - CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
  schedule:
    # Run daily at 6:00 AM UTC (matches Jenkins schedule)
    - cron: '0 6 * * 1-5'

env:
  NODE_VERSION: 'lts/*'
  PLAYWRIGHT_SERVICE_URL: 'wss://eastus.api.playwright.microsoft.com/playwrightworkspaces/18d5185e-7f8a-46e0-afa3-002163bd7cef/browsers'

jobs:
  azure-cucumber-tests:
    name: Azure Cucumber BDD Tests
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, staging, prod]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers (fallback)
      run: npx playwright install --with-deps
    
    - name: Create reports directory
      run: mkdir -p reports
    
    - name: Run Azure Cucumber tests
      run: npm run test:azure:parallel
      env:
        CI: true
        HEADLESS: true
        TEST_ENV: ${{ matrix.environment }}
        CUCUMBER_WORKERS: 20
        PLAYWRIGHT_SERVICE_URL: ${{ env.PLAYWRIGHT_SERVICE_URL }}
        PLAYWRIGHT_SERVICE_ACCESS_TOKEN: ${{ secrets.PLAYWRIGHT_SERVICE_ACCESS_TOKEN }}
    
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: azure-cucumber-reports-${{ matrix.environment }}-${{ github.run_number }}
        path: |
          reports/
          test-results/
        retention-days: 30



  collect-reports:
    name: Collect All Test Reports
    needs: [azure-cucumber-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: "*-${{ github.run_number }}"
        path: collected-artifacts
        merge-multiple: true
    
    - name: Upload consolidated reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: consolidated-azure-reports-${{ github.run_number }}
        path: collected-artifacts/
        retention-days: 30

  notify-results:
    name: Notify Test Results
    needs: [azure-cucumber-tests, collect-reports]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download consolidated report artifact
        uses: actions/download-artifact@v4
        with:
          name: consolidated-azure-reports-${{ github.run_number }}
          path: consolidated

      - name: Zip consolidated report for email attachment
        if: always()
        run: |
          if [ -d "consolidated" ]; then
            (cd consolidated && zip -r ../consolidated-azure-reports-${{ github.run_number }}.zip . >/dev/null)
          else
            echo "No consolidated report directory found."
          fi

      - name: Build HTML email body
        id: body
        if: always()
        run: |
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          STATUS="${{ needs.azure-cucumber-tests.result }}"  # success/failure for the whole matrix
          WF="${{ github.workflow }}"
          RUN_NO="${{ github.run_number }}"
          BRANCH="${{ github.ref_name }}"
          TITLE="${{ github.event.pull_request.title || github.event.head_commit.message || 'CI Run' }}"
          cat > email.html <<'HTML'
          <h2>Azure Cucumber BDD Testing Results</h2>
          <p><b>Status:</b> __STATUS__</p>
          <p><b>Workflow:</b> __WF__ #__RUN_NO__</p>
          <p><b>Branch:</b> __BRANCH__</p>
          <p><b>PR/Commit:</b> __TITLE__</p>
          <p><a href="__RUN_URL__">Open GitHub Actions Run</a></p>
          <p>Artifacts include environment-specific reports (dev / staging / prod). If attached, unzip
          <code>consolidated-azure-reports-__RUN_NO__.zip</code> and open the report(s) inside.</p>
          HTML
          sed -i "s|__STATUS__|${STATUS}|g" email.html
          sed -i "s|__WF__|${WF}|g" email.html
          sed -i "s|__RUN_NO__|${RUN_NO}|g" email.html
          sed -i "s|__BRANCH__|${BRANCH}|g" email.html
          sed -i "s|__TITLE__|${TITLE}|g" email.html
          sed -i "s|__RUN_URL__|${RUN_URL}|g" email.html
          echo "path=email.html" >> $GITHUB_OUTPUT

      - name: Send email (SMTP)
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          from: ${{ secrets.EMAIL_FROM }}
          to: ${{ secrets.EMAIL_TO }}
          subject: "Azure Cucumber BDD: ${{ needs.azure-cucumber-tests.result }} ‚Äì ${{ github.workflow }} #${{ github.run_number }} (/${{ github.ref_name }})"
          html_body: file://${{ steps.body.outputs.path }}
          attachments: |
            consolidated-azure-reports-${{ github.run_number }}.zip

      - name: Comment PR with Azure test results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const cucumberResult = '${{ needs.azure-cucumber-tests.result }}';
            let comment = '## üå©Ô∏è Azure Cucumber BDD Testing Results\n\n';
            comment += '### Test Execution Summary:\n';
            comment += `- **Azure Cucumber BDD Tests**: ${cucumberResult === 'success' ? '‚úÖ PASSED' : '‚ùå FAILED'}\n\n`;
            if (cucumberResult === 'success') {
              comment += 'üéâ **All Azure Cucumber tests passed successfully!**\n\n';
              comment += '**Highlights:**\n';
              comment += '- ‚ö° 20 parallel workers on Azure cloud\n';
              comment += '- üåê Cross-browser capability\n';
              comment += '- üìä Enterprise-scale BDD execution\n';
            } else {
              comment += '‚ö†Ô∏è **Some tests failed.** Check artifacts for details.\n';
            }
            comment += `\nüìã [Artifacts & logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
